name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build applications
        run: pnpm run build

      - name: Start staging environment
        run: |
          # Start the application stack
          docker-compose -f docker-compose.prod.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 60
          
          # Check if services are healthy
          curl -f http://localhost/health || exit 1

      - name: Run OWASP ZAP Security Scan
        run: |
          # Set staging URL for local testing
          export STAGING_URL="http://localhost"
          export SCAN_DURATION=300
          
          # Run security scan
          ./scripts/security-scan.sh

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            security-scan-results/
            zap-report.html
            zap-alerts.json

      - name: Run dependency vulnerability scan
        run: |
          # Install audit tools
          npm install -g audit-ci
          
          # Run npm audit
          npm audit --audit-level=moderate || true
          
          # Run pnpm audit
          pnpm audit || true

      - name: Run SAST scan with CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run container security scan
        run: |
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.48.0
          
          # Scan Docker images
          trivy image --severity HIGH,CRITICAL --format json --output security-scan-results/container-scan.json party-puzzle-palooza-api:latest || true
          trivy image --severity HIGH,CRITICAL --format json --output security-scan-results/web-scan.json party-puzzle-palooza-web:latest || true

      - name: Check for security issues
        run: |
          # Check if any critical issues were found
          if [ -f security-scan-results/security-summary.md ]; then
            if grep -q "‚ùå Detected" security-scan-results/security-summary.md; then
              echo "üö® Critical security issues detected!"
              cat security-scan-results/security-summary.md
              exit 1
            else
              echo "‚úÖ No critical security issues found"
              cat security-scan-results/security-summary.md
            fi
          fi

      - name: Cleanup
        if: always()
        run: |
          # Stop containers
          docker-compose -f docker-compose.prod.yml down -v
          
          # Clean up images
          docker system prune -f

      - name: Comment PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let comment = '## üîí Security Scan Results\n\n';
            
            if (fs.existsSync('security-scan-results/security-summary.md')) {
              const summary = fs.readFileSync('security-scan-results/security-summary.md', 'utf8');
              comment += summary + '\n\n';
            }
            
            comment += '**Scan completed:** ' + new Date().toISOString() + '\n';
            comment += '**Full results:** Available in workflow artifacts\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            }); 